// 1. 首先js代码有两种执行环境一种是全局的执行环境，一种是函数执行环境。
// 2. 而在生成执行环境的时候会有两个阶段：第一阶段是创建的阶段，js解释器会找出需要提升的变量和函数，并且给他们提前在内存中
// 开辟好空间，函数会将整个函数存入内存中，变量只声明并且赋值为undefined,而第二阶段就是代码执行阶段，我们可以直接提前使用
// 3. 在提升的过程中，相同的函数会覆盖上一个函数，并且函数的优先级高于变量。
// 4. es6中引入的let，不能在声明前使用，但是并不是说let没有提升，它也提升了，并且在第一阶段为他开辟好了空间，但是因为这个
// 声明的特性导致了并不能在声明前使用。
