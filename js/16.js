// v8 实现了准确式GC，gc采用了分代式垃圾回收机制，v8将内存堆分为新生代和老生代两部分

// 新生代：
// 对象一般存活时间较短，使用scavenge gc算法。
// 内存分为两部分，分别为from空间和to空间。在这两个空间中必定有一个是使用的，一个是空闲的。新分配的对象会被放入from空间中，当from空间被占满时，新生代gc就会启动了。
// 算法会检查from中存活的对象并复制到to空间中，如果有失活的对象就会被销毁。当复制完成后将from空间和to空间互换，这样gc就结束了。

// 老生代：
// 这两种情况的对象会出现在老生代中
// 1. 经历过一个scavenge 的新生代对象。
// 2. to空间的对象占比大小超过25%。为了不影响到内存分配，会将对象从新生代移到老生代空间中。

// 现在还对这个垃圾回收，没什么概念，就大概了解一下